{"ast":null,"code":"var _jsxFileName = \"/Users/matthewbrockus/sei/projects/Tooly/frontend/src/components/SignIn/SignIn.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport './SignIn.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SignIn(props) {\n  _s();\n\n  const [user, setUser] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate(); // GET request to match email/pw with DB, hash pw before sending?\n  // Do i need to store the token in a new var if thats what the db will return?\n  // Or how can I redirect the page to /toolcard when the login is successful?\n  // Unsuccessful logins should be caught with custom_errors --- not sure how to display these errors, are they console.logs?\n\n  function handleSubmit(event) {\n    event.preventDefault(); // axios\n    // \t.get(`https://cryptic-dusk-16798.herokuapp.com/listing/${id}`, user)\n    // \t.then((res) => {\n    // \t\tconsole.log(res);\n\n    navigate('/toolcard'); // \t});\n    // console.log(user);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"login-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"login-ul\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"login-li\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            htmlFor: \"user\",\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"login-input\",\n            id: \"email\",\n            type: \"email\",\n            onChange: event => setUser({ ...user,\n              user: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"login-li\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            htmlFor: \"password\",\n            children: \"Password:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"login-input\",\n            id: \"password\",\n            type: \"password\",\n            onChange: event => setPassword({ ...password,\n              password: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"login-li\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"login-button\",\n            type: \"submit\",\n            children: \"Log In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/signup\",\n      className: \"links\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sign-up-button\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 3\n  }, this);\n}\n\n_s(SignIn, \"jwQc/3i6ZBH7FTmhYO9nNAmxuAQ=\", false, function () {\n  return [useNavigate];\n});\n\n_c = SignIn;\nexport default SignIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["/Users/matthewbrockus/sei/projects/Tooly/frontend/src/components/SignIn/SignIn.js"],"names":["React","useState","Link","useNavigate","SignIn","props","user","setUser","password","setPassword","navigate","handleSubmit","event","preventDefault","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,kBAAlC;AACA,OAAO,cAAP;;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMS,QAAQ,GAAGP,WAAW,EAA5B,CAJsB,CAMtB;AACA;AACA;AACA;;AAEA,WAASQ,YAAT,CAAsBC,KAAtB,EAA6B;AAC5BA,IAAAA,KAAK,CAACC,cAAN,GAD4B,CAE5B;AACA;AACA;AACA;;AACAH,IAAAA,QAAQ,CAAC,WAAD,CAAR,CAN4B,CAO5B;AAEA;AACA;;AAED,sBACC;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA,4BACC;AAAM,MAAA,QAAQ,EAAEC,YAAhB;AAAA,6BACC;AAAI,QAAA,SAAS,EAAC,UAAd;AAAA,gCACC;AAAI,UAAA,SAAS,EAAC,UAAd;AAAA,kCACC;AAAO,YAAA,SAAS,EAAC,YAAjB;AAA8B,YAAA,OAAO,EAAC,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,eAIC;AACC,YAAA,SAAS,EAAC,aADX;AAEC,YAAA,EAAE,EAAC,OAFJ;AAGC,YAAA,IAAI,EAAC,OAHN;AAIC,YAAA,QAAQ,EAAGC,KAAD,IACTL,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAWA,cAAAA,IAAI,EAAEM,KAAK,CAACE,MAAN,CAAaC;AAA9B,aAAD;AALT;AAAA;AAAA;AAAA;AAAA,kBAJD;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAaC;AAAI,UAAA,SAAS,EAAC,UAAd;AAAA,kCACC;AAAO,YAAA,SAAS,EAAC,YAAjB;AAA8B,YAAA,OAAO,EAAC,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,eAIC;AACC,YAAA,SAAS,EAAC,aADX;AAEC,YAAA,EAAE,EAAC,UAFJ;AAGC,YAAA,IAAI,EAAC,UAHN;AAIC,YAAA,QAAQ,EAAGH,KAAD,IACTH,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeA,cAAAA,QAAQ,EAAEI,KAAK,CAACE,MAAN,CAAaC;AAAtC,aAAD;AALb;AAAA;AAAA;AAAA;AAAA,kBAJD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbD,eAyBC;AAAI,UAAA,SAAS,EAAC,UAAd;AAAA,iCACC;AAAQ,YAAA,SAAS,EAAC,cAAlB;AAAiC,YAAA,IAAI,EAAC,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBAzBD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAkCC,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,SAAT;AAAmB,MAAA,SAAS,EAAC,OAA7B;AAAA,6BACC;AAAQ,QAAA,SAAS,EAAC,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAlCD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAwCA;;GA/DQX,M;UAISD,W;;;KAJTC,M;AAiET,eAAeA,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport './SignIn.css';\n\nfunction SignIn(props) {\n\tconst [user, setUser] = useState('');\n\tconst [password, setPassword] = useState('');\n\n\tconst navigate = useNavigate();\n\n\t// GET request to match email/pw with DB, hash pw before sending?\n\t// Do i need to store the token in a new var if thats what the db will return?\n\t// Or how can I redirect the page to /toolcard when the login is successful?\n\t// Unsuccessful logins should be caught with custom_errors --- not sure how to display these errors, are they console.logs?\n\n\tfunction handleSubmit(event) {\n\t\tevent.preventDefault();\n\t\t// axios\n\t\t// \t.get(`https://cryptic-dusk-16798.herokuapp.com/listing/${id}`, user)\n\t\t// \t.then((res) => {\n\t\t// \t\tconsole.log(res);\n\t\tnavigate('/toolcard');\n\t\t// \t});\n\n\t\t// console.log(user);\n\t}\n\n\treturn (\n\t\t<main className='login-form'>\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<ul className='login-ul'>\n\t\t\t\t\t<li className='login-li'>\n\t\t\t\t\t\t<label className='form-label' htmlFor='user'>\n\t\t\t\t\t\t\tEmail:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName='login-input'\n\t\t\t\t\t\t\tid='email'\n\t\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\t\tonChange={(event) =>\n\t\t\t\t\t\t\t\tsetUser({ ...user, user: event.target.value })\n\t\t\t\t\t\t\t}></input>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li className='login-li'>\n\t\t\t\t\t\t<label className='form-label' htmlFor='password'>\n\t\t\t\t\t\t\tPassword:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName='login-input'\n\t\t\t\t\t\t\tid='password'\n\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\tonChange={(event) =>\n\t\t\t\t\t\t\t\tsetPassword({ ...password, password: event.target.value })\n\t\t\t\t\t\t\t}></input>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li className='login-li'>\n\t\t\t\t\t\t<button className='login-button' type='submit'>\n\t\t\t\t\t\t\tLog In\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</form>\n\t\t\t<Link to='/signup' className='links'>\n\t\t\t\t<button className='sign-up-button'>Sign Up</button>\n\t\t\t</Link>\n\t\t</main>\n\t);\n}\n\nexport default SignIn;\n"]},"metadata":{},"sourceType":"module"}